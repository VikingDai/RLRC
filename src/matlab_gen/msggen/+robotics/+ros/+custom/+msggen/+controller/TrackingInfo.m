classdef TrackingInfo < robotics.ros.Message
    %TrackingInfo MATLAB implementation of controller/TrackingInfo
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'controller/TrackingInfo' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '876f28c39649ff9ace21d13a5878a67c' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        Vx
        Dy
        Dtheta
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Dtheta', 'Dy', 'Vx'} % List of non-constant message properties
        ROSPropertyList = {'dtheta', 'dy', 'vx'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = TrackingInfo(msg)
            %TrackingInfo Construct the message object TrackingInfo
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function vx = get.Vx(obj)
            %get.Vx Get the value for property Vx
            vx = single(obj.JavaMessage.getVx);
        end
        
        function set.Vx(obj, vx)
            %set.Vx Set the value for property Vx
            validateattributes(vx, {'numeric'}, {'nonempty', 'scalar'}, 'TrackingInfo', 'Vx');
            
            obj.JavaMessage.setVx(vx);
        end
        
        function dy = get.Dy(obj)
            %get.Dy Get the value for property Dy
            dy = single(obj.JavaMessage.getDy);
        end
        
        function set.Dy(obj, dy)
            %set.Dy Set the value for property Dy
            validateattributes(dy, {'numeric'}, {'nonempty', 'scalar'}, 'TrackingInfo', 'Dy');
            
            obj.JavaMessage.setDy(dy);
        end
        
        function dtheta = get.Dtheta(obj)
            %get.Dtheta Get the value for property Dtheta
            dtheta = single(obj.JavaMessage.getDtheta);
        end
        
        function set.Dtheta(obj, dtheta)
            %set.Dtheta Set the value for property Dtheta
            validateattributes(dtheta, {'numeric'}, {'nonempty', 'scalar'}, 'TrackingInfo', 'Dtheta');
            
            obj.JavaMessage.setDtheta(dtheta);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Vx = obj.Vx;
            cpObj.Dy = obj.Dy;
            cpObj.Dtheta = obj.Dtheta;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Vx = strObj.Vx;
            obj.Dy = strObj.Dy;
            obj.Dtheta = strObj.Dtheta;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Vx = obj.Vx;
            strObj.Dy = obj.Dy;
            strObj.Dtheta = obj.Dtheta;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.controller.TrackingInfo.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.controller.TrackingInfo;
            obj.reload(strObj);
        end
    end
end
