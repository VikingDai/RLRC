classdef Time < robotics.ros.Message
    %Time MATLAB implementation of path_follower/Time
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'path_follower/Time' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '0f100a1b959faa915aef817b8b8f13a8' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        TStart
        TEnd
        MpcStart
        T1
        T2
        T3
        T4
        T5
        T6
        T7
        T8
        T9
        SolverStart
        SolverEnd
        MpcEnd
    end
    
    properties (Constant, Hidden)
        PropertyList = {'MpcEnd', 'MpcStart', 'SolverEnd', 'SolverStart', 'T1', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7', 'T8', 'T9', 'TEnd', 'TStart'} % List of non-constant message properties
        ROSPropertyList = {'mpc_end', 'mpc_start', 'solver_end', 'solver_start', 't1', 't2', 't3', 't4', 't5', 't6', 't7', 't8', 't9', 't_end', 't_start'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = Time(msg)
            %Time Construct the message object Time
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function tstart = get.TStart(obj)
            %get.TStart Get the value for property TStart
            tstart = double(obj.JavaMessage.getTStart);
        end
        
        function set.TStart(obj, tstart)
            %set.TStart Set the value for property TStart
            validateattributes(tstart, {'numeric'}, {'nonempty', 'scalar'}, 'Time', 'TStart');
            
            obj.JavaMessage.setTStart(tstart);
        end
        
        function tend = get.TEnd(obj)
            %get.TEnd Get the value for property TEnd
            tend = double(obj.JavaMessage.getTEnd);
        end
        
        function set.TEnd(obj, tend)
            %set.TEnd Set the value for property TEnd
            validateattributes(tend, {'numeric'}, {'nonempty', 'scalar'}, 'Time', 'TEnd');
            
            obj.JavaMessage.setTEnd(tend);
        end
        
        function mpcstart = get.MpcStart(obj)
            %get.MpcStart Get the value for property MpcStart
            mpcstart = double(obj.JavaMessage.getMpcStart);
        end
        
        function set.MpcStart(obj, mpcstart)
            %set.MpcStart Set the value for property MpcStart
            validateattributes(mpcstart, {'numeric'}, {'nonempty', 'scalar'}, 'Time', 'MpcStart');
            
            obj.JavaMessage.setMpcStart(mpcstart);
        end
        
        function t1 = get.T1(obj)
            %get.T1 Get the value for property T1
            t1 = double(obj.JavaMessage.getT1);
        end
        
        function set.T1(obj, t1)
            %set.T1 Set the value for property T1
            validateattributes(t1, {'numeric'}, {'nonempty', 'scalar'}, 'Time', 'T1');
            
            obj.JavaMessage.setT1(t1);
        end
        
        function t2 = get.T2(obj)
            %get.T2 Get the value for property T2
            t2 = double(obj.JavaMessage.getT2);
        end
        
        function set.T2(obj, t2)
            %set.T2 Set the value for property T2
            validateattributes(t2, {'numeric'}, {'nonempty', 'scalar'}, 'Time', 'T2');
            
            obj.JavaMessage.setT2(t2);
        end
        
        function t3 = get.T3(obj)
            %get.T3 Get the value for property T3
            t3 = double(obj.JavaMessage.getT3);
        end
        
        function set.T3(obj, t3)
            %set.T3 Set the value for property T3
            validateattributes(t3, {'numeric'}, {'nonempty', 'scalar'}, 'Time', 'T3');
            
            obj.JavaMessage.setT3(t3);
        end
        
        function t4 = get.T4(obj)
            %get.T4 Get the value for property T4
            t4 = double(obj.JavaMessage.getT4);
        end
        
        function set.T4(obj, t4)
            %set.T4 Set the value for property T4
            validateattributes(t4, {'numeric'}, {'nonempty', 'scalar'}, 'Time', 'T4');
            
            obj.JavaMessage.setT4(t4);
        end
        
        function t5 = get.T5(obj)
            %get.T5 Get the value for property T5
            t5 = double(obj.JavaMessage.getT5);
        end
        
        function set.T5(obj, t5)
            %set.T5 Set the value for property T5
            validateattributes(t5, {'numeric'}, {'nonempty', 'scalar'}, 'Time', 'T5');
            
            obj.JavaMessage.setT5(t5);
        end
        
        function t6 = get.T6(obj)
            %get.T6 Get the value for property T6
            t6 = double(obj.JavaMessage.getT6);
        end
        
        function set.T6(obj, t6)
            %set.T6 Set the value for property T6
            validateattributes(t6, {'numeric'}, {'nonempty', 'scalar'}, 'Time', 'T6');
            
            obj.JavaMessage.setT6(t6);
        end
        
        function t7 = get.T7(obj)
            %get.T7 Get the value for property T7
            t7 = double(obj.JavaMessage.getT7);
        end
        
        function set.T7(obj, t7)
            %set.T7 Set the value for property T7
            validateattributes(t7, {'numeric'}, {'nonempty', 'scalar'}, 'Time', 'T7');
            
            obj.JavaMessage.setT7(t7);
        end
        
        function t8 = get.T8(obj)
            %get.T8 Get the value for property T8
            t8 = double(obj.JavaMessage.getT8);
        end
        
        function set.T8(obj, t8)
            %set.T8 Set the value for property T8
            validateattributes(t8, {'numeric'}, {'nonempty', 'scalar'}, 'Time', 'T8');
            
            obj.JavaMessage.setT8(t8);
        end
        
        function t9 = get.T9(obj)
            %get.T9 Get the value for property T9
            t9 = double(obj.JavaMessage.getT9);
        end
        
        function set.T9(obj, t9)
            %set.T9 Set the value for property T9
            validateattributes(t9, {'numeric'}, {'nonempty', 'scalar'}, 'Time', 'T9');
            
            obj.JavaMessage.setT9(t9);
        end
        
        function solverstart = get.SolverStart(obj)
            %get.SolverStart Get the value for property SolverStart
            solverstart = double(obj.JavaMessage.getSolverStart);
        end
        
        function set.SolverStart(obj, solverstart)
            %set.SolverStart Set the value for property SolverStart
            validateattributes(solverstart, {'numeric'}, {'nonempty', 'scalar'}, 'Time', 'SolverStart');
            
            obj.JavaMessage.setSolverStart(solverstart);
        end
        
        function solverend = get.SolverEnd(obj)
            %get.SolverEnd Get the value for property SolverEnd
            solverend = double(obj.JavaMessage.getSolverEnd);
        end
        
        function set.SolverEnd(obj, solverend)
            %set.SolverEnd Set the value for property SolverEnd
            validateattributes(solverend, {'numeric'}, {'nonempty', 'scalar'}, 'Time', 'SolverEnd');
            
            obj.JavaMessage.setSolverEnd(solverend);
        end
        
        function mpcend = get.MpcEnd(obj)
            %get.MpcEnd Get the value for property MpcEnd
            mpcend = double(obj.JavaMessage.getMpcEnd);
        end
        
        function set.MpcEnd(obj, mpcend)
            %set.MpcEnd Set the value for property MpcEnd
            validateattributes(mpcend, {'numeric'}, {'nonempty', 'scalar'}, 'Time', 'MpcEnd');
            
            obj.JavaMessage.setMpcEnd(mpcend);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.TStart = obj.TStart;
            cpObj.TEnd = obj.TEnd;
            cpObj.MpcStart = obj.MpcStart;
            cpObj.T1 = obj.T1;
            cpObj.T2 = obj.T2;
            cpObj.T3 = obj.T3;
            cpObj.T4 = obj.T4;
            cpObj.T5 = obj.T5;
            cpObj.T6 = obj.T6;
            cpObj.T7 = obj.T7;
            cpObj.T8 = obj.T8;
            cpObj.T9 = obj.T9;
            cpObj.SolverStart = obj.SolverStart;
            cpObj.SolverEnd = obj.SolverEnd;
            cpObj.MpcEnd = obj.MpcEnd;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.TStart = strObj.TStart;
            obj.TEnd = strObj.TEnd;
            obj.MpcStart = strObj.MpcStart;
            obj.T1 = strObj.T1;
            obj.T2 = strObj.T2;
            obj.T3 = strObj.T3;
            obj.T4 = strObj.T4;
            obj.T5 = strObj.T5;
            obj.T6 = strObj.T6;
            obj.T7 = strObj.T7;
            obj.T8 = strObj.T8;
            obj.T9 = strObj.T9;
            obj.SolverStart = strObj.SolverStart;
            obj.SolverEnd = strObj.SolverEnd;
            obj.MpcEnd = strObj.MpcEnd;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.TStart = obj.TStart;
            strObj.TEnd = obj.TEnd;
            strObj.MpcStart = obj.MpcStart;
            strObj.T1 = obj.T1;
            strObj.T2 = obj.T2;
            strObj.T3 = obj.T3;
            strObj.T4 = obj.T4;
            strObj.T5 = obj.T5;
            strObj.T6 = obj.T6;
            strObj.T7 = obj.T7;
            strObj.T8 = obj.T8;
            strObj.T9 = obj.T9;
            strObj.SolverStart = obj.SolverStart;
            strObj.SolverEnd = obj.SolverEnd;
            strObj.MpcEnd = obj.MpcEnd;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.path_follower.Time.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.path_follower.Time;
            obj.reload(strObj);
        end
    end
end
