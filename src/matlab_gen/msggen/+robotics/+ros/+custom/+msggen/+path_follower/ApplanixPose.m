classdef ApplanixPose < robotics.ros.Message
    %ApplanixPose MATLAB implementation of path_follower/ApplanixPose
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'path_follower/ApplanixPose' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'cc005b38b12f428cb31db2f4286c261b' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Constant, Access = protected)
        StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
    end
    
    properties (Dependent)
        Header
        Timestamp
        SmoothX
        SmoothY
        SmoothZ
        Latitude
        Longitude
        Altitude
        VelNorth
        VelEast
        VelUp
        Speed
        Track
        Roll
        Pitch
        Yaw
        RateRoll
        RatePitch
        RateYaw
        AccelX
        AccelY
        AccelZ
        Wander
        Id
        PostprocessCode
        HardwareTimestamp
        HardwareTimeMode
    end
    
    properties (Access = protected)
        Cache = struct('Header', []) % The cache for fast data access
    end
    
    properties (Constant, Hidden)
        PropertyList = {'AccelX', 'AccelY', 'AccelZ', 'Altitude', 'HardwareTimeMode', 'HardwareTimestamp', 'Header', 'Id', 'Latitude', 'Longitude', 'Pitch', 'PostprocessCode', 'RatePitch', 'RateRoll', 'RateYaw', 'Roll', 'SmoothX', 'SmoothY', 'SmoothZ', 'Speed', 'Timestamp', 'Track', 'VelEast', 'VelNorth', 'VelUp', 'Wander', 'Yaw'} % List of non-constant message properties
        ROSPropertyList = {'accel_x', 'accel_y', 'accel_z', 'altitude', 'hardware_time_mode', 'hardware_timestamp', 'header', 'id', 'latitude', 'longitude', 'pitch', 'postprocess_code', 'rate_pitch', 'rate_roll', 'rate_yaw', 'roll', 'smooth_x', 'smooth_y', 'smooth_z', 'speed', 'timestamp', 'track', 'vel_east', 'vel_north', 'vel_up', 'wander', 'yaw'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = ApplanixPose(msg)
            %ApplanixPose Construct the message object ApplanixPose
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function header = get.Header(obj)
            %get.Header Get the value for property Header
            if isempty(obj.Cache.Header)
                obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
            end
            header = obj.Cache.Header;
        end
        
        function set.Header(obj, header)
            %set.Header Set the value for property Header
            validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'ApplanixPose', 'Header');
            
            obj.JavaMessage.setHeader(header.getJavaObject);
            
            % Update cache if necessary
            if ~isempty(obj.Cache.Header)
                obj.Cache.Header.setJavaObject(header.getJavaObject);
            end
        end
        
        function timestamp = get.Timestamp(obj)
            %get.Timestamp Get the value for property Timestamp
            timestamp = double(obj.JavaMessage.getTimestamp);
        end
        
        function set.Timestamp(obj, timestamp)
            %set.Timestamp Set the value for property Timestamp
            validateattributes(timestamp, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'Timestamp');
            
            obj.JavaMessage.setTimestamp(timestamp);
        end
        
        function smoothx = get.SmoothX(obj)
            %get.SmoothX Get the value for property SmoothX
            smoothx = double(obj.JavaMessage.getSmoothX);
        end
        
        function set.SmoothX(obj, smoothx)
            %set.SmoothX Set the value for property SmoothX
            validateattributes(smoothx, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'SmoothX');
            
            obj.JavaMessage.setSmoothX(smoothx);
        end
        
        function smoothy = get.SmoothY(obj)
            %get.SmoothY Get the value for property SmoothY
            smoothy = double(obj.JavaMessage.getSmoothY);
        end
        
        function set.SmoothY(obj, smoothy)
            %set.SmoothY Set the value for property SmoothY
            validateattributes(smoothy, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'SmoothY');
            
            obj.JavaMessage.setSmoothY(smoothy);
        end
        
        function smoothz = get.SmoothZ(obj)
            %get.SmoothZ Get the value for property SmoothZ
            smoothz = double(obj.JavaMessage.getSmoothZ);
        end
        
        function set.SmoothZ(obj, smoothz)
            %set.SmoothZ Set the value for property SmoothZ
            validateattributes(smoothz, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'SmoothZ');
            
            obj.JavaMessage.setSmoothZ(smoothz);
        end
        
        function latitude = get.Latitude(obj)
            %get.Latitude Get the value for property Latitude
            latitude = double(obj.JavaMessage.getLatitude);
        end
        
        function set.Latitude(obj, latitude)
            %set.Latitude Set the value for property Latitude
            validateattributes(latitude, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'Latitude');
            
            obj.JavaMessage.setLatitude(latitude);
        end
        
        function longitude = get.Longitude(obj)
            %get.Longitude Get the value for property Longitude
            longitude = double(obj.JavaMessage.getLongitude);
        end
        
        function set.Longitude(obj, longitude)
            %set.Longitude Set the value for property Longitude
            validateattributes(longitude, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'Longitude');
            
            obj.JavaMessage.setLongitude(longitude);
        end
        
        function altitude = get.Altitude(obj)
            %get.Altitude Get the value for property Altitude
            altitude = double(obj.JavaMessage.getAltitude);
        end
        
        function set.Altitude(obj, altitude)
            %set.Altitude Set the value for property Altitude
            validateattributes(altitude, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'Altitude');
            
            obj.JavaMessage.setAltitude(altitude);
        end
        
        function velnorth = get.VelNorth(obj)
            %get.VelNorth Get the value for property VelNorth
            velnorth = single(obj.JavaMessage.getVelNorth);
        end
        
        function set.VelNorth(obj, velnorth)
            %set.VelNorth Set the value for property VelNorth
            validateattributes(velnorth, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'VelNorth');
            
            obj.JavaMessage.setVelNorth(velnorth);
        end
        
        function veleast = get.VelEast(obj)
            %get.VelEast Get the value for property VelEast
            veleast = single(obj.JavaMessage.getVelEast);
        end
        
        function set.VelEast(obj, veleast)
            %set.VelEast Set the value for property VelEast
            validateattributes(veleast, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'VelEast');
            
            obj.JavaMessage.setVelEast(veleast);
        end
        
        function velup = get.VelUp(obj)
            %get.VelUp Get the value for property VelUp
            velup = single(obj.JavaMessage.getVelUp);
        end
        
        function set.VelUp(obj, velup)
            %set.VelUp Set the value for property VelUp
            validateattributes(velup, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'VelUp');
            
            obj.JavaMessage.setVelUp(velup);
        end
        
        function speed = get.Speed(obj)
            %get.Speed Get the value for property Speed
            speed = single(obj.JavaMessage.getSpeed);
        end
        
        function set.Speed(obj, speed)
            %set.Speed Set the value for property Speed
            validateattributes(speed, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'Speed');
            
            obj.JavaMessage.setSpeed(speed);
        end
        
        function track = get.Track(obj)
            %get.Track Get the value for property Track
            track = single(obj.JavaMessage.getTrack);
        end
        
        function set.Track(obj, track)
            %set.Track Set the value for property Track
            validateattributes(track, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'Track');
            
            obj.JavaMessage.setTrack(track);
        end
        
        function roll = get.Roll(obj)
            %get.Roll Get the value for property Roll
            roll = double(obj.JavaMessage.getRoll);
        end
        
        function set.Roll(obj, roll)
            %set.Roll Set the value for property Roll
            validateattributes(roll, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'Roll');
            
            obj.JavaMessage.setRoll(roll);
        end
        
        function pitch = get.Pitch(obj)
            %get.Pitch Get the value for property Pitch
            pitch = double(obj.JavaMessage.getPitch);
        end
        
        function set.Pitch(obj, pitch)
            %set.Pitch Set the value for property Pitch
            validateattributes(pitch, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'Pitch');
            
            obj.JavaMessage.setPitch(pitch);
        end
        
        function yaw = get.Yaw(obj)
            %get.Yaw Get the value for property Yaw
            yaw = double(obj.JavaMessage.getYaw);
        end
        
        function set.Yaw(obj, yaw)
            %set.Yaw Set the value for property Yaw
            validateattributes(yaw, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'Yaw');
            
            obj.JavaMessage.setYaw(yaw);
        end
        
        function rateroll = get.RateRoll(obj)
            %get.RateRoll Get the value for property RateRoll
            rateroll = double(obj.JavaMessage.getRateRoll);
        end
        
        function set.RateRoll(obj, rateroll)
            %set.RateRoll Set the value for property RateRoll
            validateattributes(rateroll, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'RateRoll');
            
            obj.JavaMessage.setRateRoll(rateroll);
        end
        
        function ratepitch = get.RatePitch(obj)
            %get.RatePitch Get the value for property RatePitch
            ratepitch = double(obj.JavaMessage.getRatePitch);
        end
        
        function set.RatePitch(obj, ratepitch)
            %set.RatePitch Set the value for property RatePitch
            validateattributes(ratepitch, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'RatePitch');
            
            obj.JavaMessage.setRatePitch(ratepitch);
        end
        
        function rateyaw = get.RateYaw(obj)
            %get.RateYaw Get the value for property RateYaw
            rateyaw = double(obj.JavaMessage.getRateYaw);
        end
        
        function set.RateYaw(obj, rateyaw)
            %set.RateYaw Set the value for property RateYaw
            validateattributes(rateyaw, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'RateYaw');
            
            obj.JavaMessage.setRateYaw(rateyaw);
        end
        
        function accelx = get.AccelX(obj)
            %get.AccelX Get the value for property AccelX
            accelx = double(obj.JavaMessage.getAccelX);
        end
        
        function set.AccelX(obj, accelx)
            %set.AccelX Set the value for property AccelX
            validateattributes(accelx, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'AccelX');
            
            obj.JavaMessage.setAccelX(accelx);
        end
        
        function accely = get.AccelY(obj)
            %get.AccelY Get the value for property AccelY
            accely = double(obj.JavaMessage.getAccelY);
        end
        
        function set.AccelY(obj, accely)
            %set.AccelY Set the value for property AccelY
            validateattributes(accely, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'AccelY');
            
            obj.JavaMessage.setAccelY(accely);
        end
        
        function accelz = get.AccelZ(obj)
            %get.AccelZ Get the value for property AccelZ
            accelz = double(obj.JavaMessage.getAccelZ);
        end
        
        function set.AccelZ(obj, accelz)
            %set.AccelZ Set the value for property AccelZ
            validateattributes(accelz, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'AccelZ');
            
            obj.JavaMessage.setAccelZ(accelz);
        end
        
        function wander = get.Wander(obj)
            %get.Wander Get the value for property Wander
            wander = double(obj.JavaMessage.getWander);
        end
        
        function set.Wander(obj, wander)
            %set.Wander Set the value for property Wander
            validateattributes(wander, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'Wander');
            
            obj.JavaMessage.setWander(wander);
        end
        
        function id = get.Id(obj)
            %get.Id Get the value for property Id
            id = typecast(int32(obj.JavaMessage.getId), 'uint32');
        end
        
        function set.Id(obj, id)
            %set.Id Set the value for property Id
            validateattributes(id, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'Id');
            
            obj.JavaMessage.setId(id);
        end
        
        function postprocesscode = get.PostprocessCode(obj)
            %get.PostprocessCode Get the value for property PostprocessCode
            postprocesscode = int32(obj.JavaMessage.getPostprocessCode);
        end
        
        function set.PostprocessCode(obj, postprocesscode)
            %set.PostprocessCode Set the value for property PostprocessCode
            validateattributes(postprocesscode, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'PostprocessCode');
            
            obj.JavaMessage.setPostprocessCode(postprocesscode);
        end
        
        function hardwaretimestamp = get.HardwareTimestamp(obj)
            %get.HardwareTimestamp Get the value for property HardwareTimestamp
            hardwaretimestamp = double(obj.JavaMessage.getHardwareTimestamp);
        end
        
        function set.HardwareTimestamp(obj, hardwaretimestamp)
            %set.HardwareTimestamp Set the value for property HardwareTimestamp
            validateattributes(hardwaretimestamp, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'HardwareTimestamp');
            
            obj.JavaMessage.setHardwareTimestamp(hardwaretimestamp);
        end
        
        function hardwaretimemode = get.HardwareTimeMode(obj)
            %get.HardwareTimeMode Get the value for property HardwareTimeMode
            hardwaretimemode = int32(obj.JavaMessage.getHardwareTimeMode);
        end
        
        function set.HardwareTimeMode(obj, hardwaretimemode)
            %set.HardwareTimeMode Set the value for property HardwareTimeMode
            validateattributes(hardwaretimemode, {'numeric'}, {'nonempty', 'scalar'}, 'ApplanixPose', 'HardwareTimeMode');
            
            obj.JavaMessage.setHardwareTimeMode(hardwaretimemode);
        end
    end
    
    methods (Access = protected)
        function resetCache(obj)
            %resetCache Resets any cached properties
            obj.Cache.Header = [];
        end
        
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Clear any existing cached properties
            cpObj.resetCache;
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.Timestamp = obj.Timestamp;
            cpObj.SmoothX = obj.SmoothX;
            cpObj.SmoothY = obj.SmoothY;
            cpObj.SmoothZ = obj.SmoothZ;
            cpObj.Latitude = obj.Latitude;
            cpObj.Longitude = obj.Longitude;
            cpObj.Altitude = obj.Altitude;
            cpObj.VelNorth = obj.VelNorth;
            cpObj.VelEast = obj.VelEast;
            cpObj.VelUp = obj.VelUp;
            cpObj.Speed = obj.Speed;
            cpObj.Track = obj.Track;
            cpObj.Roll = obj.Roll;
            cpObj.Pitch = obj.Pitch;
            cpObj.Yaw = obj.Yaw;
            cpObj.RateRoll = obj.RateRoll;
            cpObj.RatePitch = obj.RatePitch;
            cpObj.RateYaw = obj.RateYaw;
            cpObj.AccelX = obj.AccelX;
            cpObj.AccelY = obj.AccelY;
            cpObj.AccelZ = obj.AccelZ;
            cpObj.Wander = obj.Wander;
            cpObj.Id = obj.Id;
            cpObj.PostprocessCode = obj.PostprocessCode;
            cpObj.HardwareTimestamp = obj.HardwareTimestamp;
            cpObj.HardwareTimeMode = obj.HardwareTimeMode;
            
            % Recursively copy compound properties
            cpObj.Header = copy(obj.Header);
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.Timestamp = strObj.Timestamp;
            obj.SmoothX = strObj.SmoothX;
            obj.SmoothY = strObj.SmoothY;
            obj.SmoothZ = strObj.SmoothZ;
            obj.Latitude = strObj.Latitude;
            obj.Longitude = strObj.Longitude;
            obj.Altitude = strObj.Altitude;
            obj.VelNorth = strObj.VelNorth;
            obj.VelEast = strObj.VelEast;
            obj.VelUp = strObj.VelUp;
            obj.Speed = strObj.Speed;
            obj.Track = strObj.Track;
            obj.Roll = strObj.Roll;
            obj.Pitch = strObj.Pitch;
            obj.Yaw = strObj.Yaw;
            obj.RateRoll = strObj.RateRoll;
            obj.RatePitch = strObj.RatePitch;
            obj.RateYaw = strObj.RateYaw;
            obj.AccelX = strObj.AccelX;
            obj.AccelY = strObj.AccelY;
            obj.AccelZ = strObj.AccelZ;
            obj.Wander = strObj.Wander;
            obj.Id = strObj.Id;
            obj.PostprocessCode = strObj.PostprocessCode;
            obj.HardwareTimestamp = strObj.HardwareTimestamp;
            obj.HardwareTimeMode = strObj.HardwareTimeMode;
            obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.Timestamp = obj.Timestamp;
            strObj.SmoothX = obj.SmoothX;
            strObj.SmoothY = obj.SmoothY;
            strObj.SmoothZ = obj.SmoothZ;
            strObj.Latitude = obj.Latitude;
            strObj.Longitude = obj.Longitude;
            strObj.Altitude = obj.Altitude;
            strObj.VelNorth = obj.VelNorth;
            strObj.VelEast = obj.VelEast;
            strObj.VelUp = obj.VelUp;
            strObj.Speed = obj.Speed;
            strObj.Track = obj.Track;
            strObj.Roll = obj.Roll;
            strObj.Pitch = obj.Pitch;
            strObj.Yaw = obj.Yaw;
            strObj.RateRoll = obj.RateRoll;
            strObj.RatePitch = obj.RatePitch;
            strObj.RateYaw = obj.RateYaw;
            strObj.AccelX = obj.AccelX;
            strObj.AccelY = obj.AccelY;
            strObj.AccelZ = obj.AccelZ;
            strObj.Wander = obj.Wander;
            strObj.Id = obj.Id;
            strObj.PostprocessCode = obj.PostprocessCode;
            strObj.HardwareTimestamp = obj.HardwareTimestamp;
            strObj.HardwareTimeMode = obj.HardwareTimeMode;
            strObj.Header = saveobj(obj.Header);
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.path_follower.ApplanixPose.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.path_follower.ApplanixPose;
            obj.reload(strObj);
        end
    end
end
