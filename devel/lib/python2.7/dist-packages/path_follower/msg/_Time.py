# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from path_follower/Time.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Time(genpy.Message):
  _md5sum = "0f100a1b959faa915aef817b8b8f13a8"
  _type = "path_follower/Time"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 t_start
float64 t_end
float64 mpc_start
float64 t1
float64 t2
float64 t3
float64 t4
float64 t5
float64 t6
float64 t7
float64 t8
float64 t9
float64 solver_start
float64 solver_end
float64 mpc_end


"""
  __slots__ = ['t_start','t_end','mpc_start','t1','t2','t3','t4','t5','t6','t7','t8','t9','solver_start','solver_end','mpc_end']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       t_start,t_end,mpc_start,t1,t2,t3,t4,t5,t6,t7,t8,t9,solver_start,solver_end,mpc_end

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Time, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.t_start is None:
        self.t_start = 0.
      if self.t_end is None:
        self.t_end = 0.
      if self.mpc_start is None:
        self.mpc_start = 0.
      if self.t1 is None:
        self.t1 = 0.
      if self.t2 is None:
        self.t2 = 0.
      if self.t3 is None:
        self.t3 = 0.
      if self.t4 is None:
        self.t4 = 0.
      if self.t5 is None:
        self.t5 = 0.
      if self.t6 is None:
        self.t6 = 0.
      if self.t7 is None:
        self.t7 = 0.
      if self.t8 is None:
        self.t8 = 0.
      if self.t9 is None:
        self.t9 = 0.
      if self.solver_start is None:
        self.solver_start = 0.
      if self.solver_end is None:
        self.solver_end = 0.
      if self.mpc_end is None:
        self.mpc_end = 0.
    else:
      self.t_start = 0.
      self.t_end = 0.
      self.mpc_start = 0.
      self.t1 = 0.
      self.t2 = 0.
      self.t3 = 0.
      self.t4 = 0.
      self.t5 = 0.
      self.t6 = 0.
      self.t7 = 0.
      self.t8 = 0.
      self.t9 = 0.
      self.solver_start = 0.
      self.solver_end = 0.
      self.mpc_end = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_15d().pack(_x.t_start, _x.t_end, _x.mpc_start, _x.t1, _x.t2, _x.t3, _x.t4, _x.t5, _x.t6, _x.t7, _x.t8, _x.t9, _x.solver_start, _x.solver_end, _x.mpc_end))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 120
      (_x.t_start, _x.t_end, _x.mpc_start, _x.t1, _x.t2, _x.t3, _x.t4, _x.t5, _x.t6, _x.t7, _x.t8, _x.t9, _x.solver_start, _x.solver_end, _x.mpc_end,) = _get_struct_15d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_15d().pack(_x.t_start, _x.t_end, _x.mpc_start, _x.t1, _x.t2, _x.t3, _x.t4, _x.t5, _x.t6, _x.t7, _x.t8, _x.t9, _x.solver_start, _x.solver_end, _x.mpc_end))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 120
      (_x.t_start, _x.t_end, _x.mpc_start, _x.t1, _x.t2, _x.t3, _x.t4, _x.t5, _x.t6, _x.t7, _x.t8, _x.t9, _x.solver_start, _x.solver_end, _x.mpc_end,) = _get_struct_15d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_15d = None
def _get_struct_15d():
    global _struct_15d
    if _struct_15d is None:
        _struct_15d = struct.Struct("<15d")
    return _struct_15d
