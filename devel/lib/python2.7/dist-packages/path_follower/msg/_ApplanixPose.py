# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from path_follower/ApplanixPose.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ApplanixPose(genpy.Message):
  _md5sum = "cc005b38b12f428cb31db2f4286c261b"
  _type = "path_follower/ApplanixPose"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header
float64 timestamp
float64 smooth_x
float64 smooth_y
float64 smooth_z
float64 latitude
float64 longitude
float64 altitude
float32 vel_north
float32 vel_east
float32 vel_up
float32 speed
float32 track
float64 roll
float64 pitch
float64 yaw
float64 rate_roll
float64 rate_pitch
float64 rate_yaw
float64 accel_x
float64 accel_y
float64 accel_z
float64 wander
uint32  id
int32   postprocess_code
float64 hardware_timestamp
int32   hardware_time_mode

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','timestamp','smooth_x','smooth_y','smooth_z','latitude','longitude','altitude','vel_north','vel_east','vel_up','speed','track','roll','pitch','yaw','rate_roll','rate_pitch','rate_yaw','accel_x','accel_y','accel_z','wander','id','postprocess_code','hardware_timestamp','hardware_time_mode']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','float64','float32','float32','float32','float32','float32','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','uint32','int32','float64','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,timestamp,smooth_x,smooth_y,smooth_z,latitude,longitude,altitude,vel_north,vel_east,vel_up,speed,track,roll,pitch,yaw,rate_roll,rate_pitch,rate_yaw,accel_x,accel_y,accel_z,wander,id,postprocess_code,hardware_timestamp,hardware_time_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ApplanixPose, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.timestamp is None:
        self.timestamp = 0.
      if self.smooth_x is None:
        self.smooth_x = 0.
      if self.smooth_y is None:
        self.smooth_y = 0.
      if self.smooth_z is None:
        self.smooth_z = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.altitude is None:
        self.altitude = 0.
      if self.vel_north is None:
        self.vel_north = 0.
      if self.vel_east is None:
        self.vel_east = 0.
      if self.vel_up is None:
        self.vel_up = 0.
      if self.speed is None:
        self.speed = 0.
      if self.track is None:
        self.track = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.rate_roll is None:
        self.rate_roll = 0.
      if self.rate_pitch is None:
        self.rate_pitch = 0.
      if self.rate_yaw is None:
        self.rate_yaw = 0.
      if self.accel_x is None:
        self.accel_x = 0.
      if self.accel_y is None:
        self.accel_y = 0.
      if self.accel_z is None:
        self.accel_z = 0.
      if self.wander is None:
        self.wander = 0.
      if self.id is None:
        self.id = 0
      if self.postprocess_code is None:
        self.postprocess_code = 0
      if self.hardware_timestamp is None:
        self.hardware_timestamp = 0.
      if self.hardware_time_mode is None:
        self.hardware_time_mode = 0
    else:
      self.header = std_msgs.msg.Header()
      self.timestamp = 0.
      self.smooth_x = 0.
      self.smooth_y = 0.
      self.smooth_z = 0.
      self.latitude = 0.
      self.longitude = 0.
      self.altitude = 0.
      self.vel_north = 0.
      self.vel_east = 0.
      self.vel_up = 0.
      self.speed = 0.
      self.track = 0.
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.rate_roll = 0.
      self.rate_pitch = 0.
      self.rate_yaw = 0.
      self.accel_x = 0.
      self.accel_y = 0.
      self.accel_z = 0.
      self.wander = 0.
      self.id = 0
      self.postprocess_code = 0
      self.hardware_timestamp = 0.
      self.hardware_time_mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d5f10dIidi().pack(_x.timestamp, _x.smooth_x, _x.smooth_y, _x.smooth_z, _x.latitude, _x.longitude, _x.altitude, _x.vel_north, _x.vel_east, _x.vel_up, _x.speed, _x.track, _x.roll, _x.pitch, _x.yaw, _x.rate_roll, _x.rate_pitch, _x.rate_yaw, _x.accel_x, _x.accel_y, _x.accel_z, _x.wander, _x.id, _x.postprocess_code, _x.hardware_timestamp, _x.hardware_time_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 176
      (_x.timestamp, _x.smooth_x, _x.smooth_y, _x.smooth_z, _x.latitude, _x.longitude, _x.altitude, _x.vel_north, _x.vel_east, _x.vel_up, _x.speed, _x.track, _x.roll, _x.pitch, _x.yaw, _x.rate_roll, _x.rate_pitch, _x.rate_yaw, _x.accel_x, _x.accel_y, _x.accel_z, _x.wander, _x.id, _x.postprocess_code, _x.hardware_timestamp, _x.hardware_time_mode,) = _get_struct_7d5f10dIidi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d5f10dIidi().pack(_x.timestamp, _x.smooth_x, _x.smooth_y, _x.smooth_z, _x.latitude, _x.longitude, _x.altitude, _x.vel_north, _x.vel_east, _x.vel_up, _x.speed, _x.track, _x.roll, _x.pitch, _x.yaw, _x.rate_roll, _x.rate_pitch, _x.rate_yaw, _x.accel_x, _x.accel_y, _x.accel_z, _x.wander, _x.id, _x.postprocess_code, _x.hardware_timestamp, _x.hardware_time_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 176
      (_x.timestamp, _x.smooth_x, _x.smooth_y, _x.smooth_z, _x.latitude, _x.longitude, _x.altitude, _x.vel_north, _x.vel_east, _x.vel_up, _x.speed, _x.track, _x.roll, _x.pitch, _x.yaw, _x.rate_roll, _x.rate_pitch, _x.rate_yaw, _x.accel_x, _x.accel_y, _x.accel_z, _x.wander, _x.id, _x.postprocess_code, _x.hardware_timestamp, _x.hardware_time_mode,) = _get_struct_7d5f10dIidi().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d5f10dIidi = None
def _get_struct_7d5f10dIidi():
    global _struct_7d5f10dIidi
    if _struct_7d5f10dIidi is None:
        _struct_7d5f10dIidi = struct.Struct("<7d5f10dIidi")
    return _struct_7d5f10dIidi
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
